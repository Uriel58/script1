fn:double rUnif(min=0, max=1) {
    return min+random()*(max-min)
}

fn:int rInt(min, max) {
    return floor(rUnif(min, max))
}

fn rChoose(a) {
    return a[rInt(0, len(a))]
}

/*
fn:dynamic sample(x, prob) {
  xlen := len(x)
  p := random()
  psum := 0
  for pi in range(0, xlen) {
    psum = psum + prob[pi]
    if (psum >= p) return pi
  }
  return null
}
*/
